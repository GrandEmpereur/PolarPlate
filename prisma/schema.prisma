// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIAL
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAUSED
}

enum PaymentStatus {
  SUCCEEDED
  FAILED
  PENDING
  REFUNDED
  PARTIALLY_REFUNDED
}

model User {
  id              String         @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  currentPlan     Plan           @default(FREE)
  subscriptions   Subscription[]
  payments        Payment[]
  webhookEvents   WebhookEvent[]

  stripeCustomerId String?        @unique

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Subscription {
  id                  String             @id @default(cuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptionId String             @unique
  stripeProductId      String
  stripePriceId        String
  status              SubscriptionStatus
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean            @default(false)
  canceledAt          DateTime?
  endedAt             DateTime?
  trialStart          DateTime?
  trialEnd            DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  payments            Payment[]

  @@map("subscription")
}

model Payment {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  stripePaymentId String        @unique
  amount         Float
  currency       String
  status         PaymentStatus
  paymentMethod  String?
  receiptUrl     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("payment")
}

model WebhookEvent {
  id           String   @id @default(cuid())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventType    String
  stripeEventId String   @unique
  payload      Json
  processed    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("webhook_event")
}
